---
import Layout from "../../layouts/Layout.astro";
import directus from "../../../lib/directus";
import { readItems } from "@directus/sdk";
import Benefit from "../../components/Benefit.astro";
import Navbar from "../../components/Navbar.astro";
import Switcher from "../../components/Switcher.astro";
import FeaturedSolutionsCard from "../../components/FeaturedSolutionsCard.astro";
import { Image } from "astro:assets";
import { htmlStringOne, htmlStringTwo } from "../../constants/htmlStrings";
import "../_index.css";
import PriceCard from "../../components/PriceCard.astro";
import Footer from "../../components/Footer.astro";
import Button from "../../components/ui/Button.astro";
import SwiperCustom from "../../components/slider/Swiper.astro";
import PriceCardsData from "../../components/react/PriceCards";
import Subscribe from "../../components/Subscribe.astro";
import { m } from "../../paraglide/messages.js";

const features = [
  {
    title: m["index.features.timeSaving.title"](),
    description: m["index.features.timeSaving.description"](),
    icon: "/clock.svg",
  },
  {
    title: m["index.features.competitivePricing.title"](),
    description: m["index.features.competitivePricing.description"](),
    icon: "/coins-hand.svg",
  },
  {
    title: m["index.features.smartInsights.title"](),
    description: m["index.features.smartInsights.description"](),
    icon: "/lightbulb.svg",
  },
  {
    title: m["index.features.actionableData.title"](),
    description: m["index.features.actionableData.description"](),
    icon: "/bar-chart.svg",
  },
  {
    title: m["index.features.globalReach.title"](),
    description: m["index.features.globalReach.description"](),
    icon: "/globe.svg",
  },
];

const stats = [
  {
    number: "15",
    title: m["index.stats.filters.title"](),
    description: m["index.stats.filters.description"](),
    highlight: m["index.stats.filters.highlight"](),
  },
  {
    number: "40",
    title: m["index.stats.parameters.title"](),
    description: m["index.stats.parameters.description"](),
    highlight: m["index.stats.parameters.highlight"](),
    suffix: "+",
  },
];
---

<style>
  :root {
    --swiper-theme-color: #ee7380;
  }
</style>

<!-- Sections appear animation -->
<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("visible");
          }
        });
      },
      {
        threshold: 0.1,
      }
    );

    const cards = document.querySelectorAll(".animate-appear");
    cards.forEach((card) => observer.observe(card));
  });
</script>

<!-- Numbers count animation -->
<script is:inline>
  function countUp(element) {
    const target = +element.getAttribute("data-target");
    const speed = 150;

    const increment = target / speed;
    let count = 0;

    const updateCount = () => {
      count += increment;
      if (count < target) {
        element.innerText = `${Math.ceil(count)}`;
        requestAnimationFrame(updateCount);
      } else {
        element.innerText = `${target}`;
      }
    };

    updateCount();
  }

  function handleIntersection(entries, observer) {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const countElement = entry.target;
        countUp(countElement);
        observer.unobserve(countElement);
      }
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    const countElements = document.querySelectorAll(".count");
    const observer = new IntersectionObserver(handleIntersection, {
      threshold: 0.5,
    });

    countElements.forEach((element) => {
      observer.observe(element);
    });
  });
</script>

<script>
  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener("click", function (e: Event) {
      e.preventDefault();

      const targetID = (e.target as HTMLAnchorElement).getAttribute("href");
      const targetElement = document.querySelector(targetID!);

      if (targetElement) {
        const offset = 100;
        const targetPosition =
          targetElement.getBoundingClientRect().top + window.scrollY - offset;

        window.scrollTo({
          top: targetPosition,
          behavior: "smooth",
        });
      }
    });
  });
</script>

<script>
  function handlePriceChange(event: CustomEvent) {
    const monthlyPrices = document.querySelectorAll(".monthly-price");
    const annualPrices = document.querySelectorAll(".annual-price");
    const yearlyPriceContainer = document.querySelectorAll(".yearly-price");
    const freeTierContainer = document.querySelectorAll(".free-tier");

    if (event.detail.period === "annual") {
      monthlyPrices.forEach((price) => price.classList.add("hidden"));
      annualPrices.forEach((price) => price.classList.remove("hidden"));
      yearlyPriceContainer.forEach((price) => price.classList.remove("hidden"));
      freeTierContainer.forEach((container) =>
        container.classList.remove("mb-[44px]")
      );
      freeTierContainer.forEach((container) =>
        container.classList.add("mb-[120px]")
      );
    } else {
      monthlyPrices.forEach((price) => price.classList.remove("hidden"));
      annualPrices.forEach((price) => price.classList.add("hidden"));
      yearlyPriceContainer.forEach((price) => price.classList.add("hidden"));
      freeTierContainer.forEach((container) =>
        container.classList.remove("mb-[120px]")
      );
      freeTierContainer.forEach((container) =>
        container.classList.add("mb-[44px]")
      );
    }
  }

  document.addEventListener(
    "pricingPeriodChange",
    handlePriceChange as EventListener
  );
</script>

<script>
  import Swiper from 'swiper';
  import { Pagination } from 'swiper/modules';

 const swiper = new Swiper(".goals-swiper", {
    modules: [Pagination],
    slidesPerView: 1,
    direction: "horizontal",
    spaceBetween: 20,
    pagination: {
      el: ".swiper-pagination",
      clickable: true,
      dynamicBullets: true,
    },
    breakpoints: {
      768: {
        spaceBetween: 30,
      },
    },
  });

</script>

<Layout title={"Ionkol | AI-Enabled Marketing Models"}>
  <Navbar />
  <main class="relative">
    <section
      class="flex justify-center items-center bg-white"
    >
      <SwiperCustom />
    </section>

    <section class="pb-24 pt-28 px-4 lg:px-12 animate-appear">
      <h1
        class="text-center text-[#EE7380] text-[62px] font-bold tracking-wide mb-16"
      >
        {m["index.keyFeatures"]()}
      </h1>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="flex flex-row items-center gap-8 p-2">
          <Image
            class="hidden lg:block"
            src="/ionExploreKey.svg"
            alt="key"
            width={198}
            height={128}
          />
          <div class="flex flex-col items-center md:items-start gap-6">
            <div class="text-5xl font-semibold flex flex-row gap-2">
              <Image src="/ion.svg" alt="key" width={95} height={50} /><span
                >{m["index.explore.title"]()}</span
              >
            </div>
            <p class="text-xl text-center md:text-left">
              {m["index.explore.description"]()}
            </p>
            <a class="hidden md:block" href="/features" data-link="/features">
              <Button
                text={m["index.explore.button"]()}
                className="w-[200px]"
              />
            </a>
          </div>
        </div>

        <div class="flex flex-row items-center gap-8 p-2">
          <Image
            class="hidden lg:block"
            src="/ionAnalyseKey.svg"
            alt="key"
            width={198}
            height={128}
          />
          <div class="flex flex-col items-center md:items-start gap-6">
            <div class="text-5xl font-semibold flex flex-row gap-2">
              <Image src="/ion.svg" alt="key" width={95} height={50} /><span
                >{m["index.analyse.title"]()}</span
              >
            </div>
            <p class="text-xl text-center md:text-left">
              {m["index.analyse.description"]()}
            </p>
            <a href="/features" data-link="/features">
              <Button
                text={m["index.analyse.button"]()}
                className="w-[200px]"
              />
            </a>
          </div>
        </div>
      </div>
    </section>

    <section class="py-20 relative bg-white px-4 lg:px-12 animate-appear">
      <div
        class="absolute rotate-180 rounded-[100%] w-full h-screen top-20 left-0 z-100"
        style="background: linear-gradient(180deg, #FFFFFF 60.5%, #FFF9F9 100%);"
      >
      </div>
      <h2
        class="text-center relative text-[#EE7380] text-[62px] font-semibold tracking-wide mb-16"
      >
        {m["index.goals.title"]()}
      </h2> 

      <div class="goals-swiper max-w-full overflow-hidden mx-auto px-4 md:hidden">
        <div class="swiper-wrapper">
          {features.map(feature => 
          (
             <div class="text-center p-6 swiper-slide w-full">
              <img
                src={feature.icon}
                alt={feature.title}
                class="w-12 h-12 mx-auto mb-4"
              />
              <h3 class="text-[#0d0c22] text-[34px] font-semibold mb-3">
                {feature.title}
              </h3>
              <p class="text-[20px]">{feature.description}</p>
            </div>
          ))}
        </div>
        <div class="swiper-pagination"></div>
      </div>

      <div
        class="hidden md:grid max-w-7xl mx-auto animate-appear grid-cols-1 md:grid-cols-2  gap-8"
      >
        {
          features.slice(0, 2).map((feature) => (
            <div class="text-center p-6">
              <img
                src={feature.icon}
                alt={feature.title}
                class="w-12 h-12 mx-auto mb-4"
              />
              <h3 class="text-[#0d0c22] text-[34px] font-semibold mb-3">
                {feature.title}
              </h3>
              <p class="text-[20px]">{feature.description}</p>
            </div>
          ))
        }
      </div>

      <div
        class="hidden md:grid max-w-7xl mx-auto animate-appear grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
      >
        {
          features.slice(2, 6).map((feature) => (
            <div class="text-center p-6">
              <img
                src={feature.icon}
                alt={feature.title}
                class="w-12 h-12 mx-auto mb-4"
              />
              <h3 class="text-[#0d0c22] text-[34px] font-semibold mb-3">
                {feature.title}
              </h3>
              <p class="text-[20px]">{feature.description}</p>
            </div>
          ))
        }
      </div>
    </section>

    <section class="py-20 px-4 lg:px-12 animate-appear">
      <div class="max-w-4xl mx-auto text-center">
        <p class="text-[62px] text-[#EE7380] gap-8 font-semibold mb-6 relative">
          <span>{m["index.power.title"]()}</span>
        </p>
        <p
          class="text-[20px] mb-16 max-w-3xl mx-auto text-center relative"
        >
          <span class="pl-[8px] text-left">{m["index.power.description1"]()}</span>
        </p>

        <div class="space-y-12">
          {
            stats.map((stat, i) => (
              <div class="flex flex-col relative lg:flex-row gap-4 lg:gap-12 justify-center lg:justify-normal items-center">
                <div class="flex flex-row items-end lg:items-center lg:gap-12">
                  <div class="relative">
                    <span
                      data-target={stat.number}
                      class="text-[#EE7380] text-[100px] font-semibold count"
                    >
                      {0}
                    </span>
                    {stat.suffix && (
                      <span class="text-[32px] font-bold text-[#EE7380] absolute top-20">
                        +
                      </span>
                    )}
                  </div>
                  <span class={`text-[24px] lg:text-[34px] font-semibold  ${i === 0 ? "mb-8 lg:mb-0" : "ml-8 mb-7 lg:mb-0"}`}>
                    {stat.title}
                  </span>
                </div> 
                <p class="text-[20px] text-center lg:text-start">
                  <span class="text-[#EE7380]">{stat.highlight + " "} </span>
                  {stat.description}
                </p>
              </div>
            ))
          }
        </div>
      </div>
    </section>

    <section class="py-20 px-4 lg:px-12 animate-appear">
      <div class="flex flex-col items-center space-y-14">
        <h2 class="text-center text-[62px] font-bold">
          <span class="text-[#EE7380]">{m["index.pricing.title"]()}</span>
        </h2>

        <div class="flex flex-col max-w-full items-center space-y-14">
          <Switcher />

          <PriceCardsData client:load />
          <a href="/pricing" data-link="/pricing">
            <Button text={m["index.pricing.button"]()} />
          </a>
        </div>
      </div>
    </section>

    <Subscribe />
  </main>
</Layout>
<Footer />

<script is:inline>
  function updateIndexLinks() {
    const pathSegments = window.location.pathname.split("/");
    const currentLang = pathSegments[1] || "en";

    document.querySelectorAll("a[data-link]").forEach((link) => {
      const basePath = link.getAttribute("data-link");
      // Only update links that aren't external or anchor links
      if (
        basePath &&
        !basePath.startsWith("http") &&
        !basePath.startsWith("#")
      ) {
        link.href = `/${currentLang}${basePath}`;
      }
    });
  }

  document.addEventListener("DOMContentLoaded", updateIndexLinks);
</script>
